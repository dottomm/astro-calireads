---
import SGQWalkthrough from '/sgqresources/Self-Generated-Questions-digiCOACH-Edition.pdf';

//import ARGImg from '../images/gettyImages/GettyImages-121518480075.jpg';
import ARGImg from '../images/ARG-module_500.jpg';
import ARGSmall from '../images/gettyImages/ARGSmall.jpg';
import GTGIMg from '../images/GTG_500.png';
import GTGsm from '../images/gettyImages/GTGsm.jpg';
import MorphImg from '../images/MorphImg_500.png';
import MorphSmall from '../images/gettyImages/MorphSmall.jpg';
import RecipTechImg from '../images/reciprocalTeaching.png';
import RTSmall from '../images/gettyImages/reciprocalTeachingSmall.jpg';
import sgqImg from '../images/gettyImages/sgq-overview.jpg';
import SGQSmall from '../images/gettyImages/sgq-overview-small.jpg';
import vocabImg from '../images/VocabMaps_500.png';
import vocabSmall from '../images/gettyImages/vocabImgSmall.jpg';
import WBImg from '../images/wordBuilder_500.png';
import WBSmall from '../images/gettyImages/wordBuilder-small.jpg';
//import WordParts from './WordParts.astro';
import Button from './Button.astro';
import MediaButton from './MediaButton.astro';
import LaunchButton from './LaunchButton.astro';
import HTMLButton from './HTMLButton.astro';
import HoverButton from './HoverButton.astro';
export interface Props {

title: string;
body: string;
url: string;
name?:string;
altText?:string;
}

//ARG Modules Data
import ARGData from '../data/ARGModuleData.json';
import ARGResources from '../data/ARGResourceData.json';
//Get The Gist Data
import GTGData from '../data/GTGModuleData.json';
import GTGResources from '../data/GTGResourceData.json';
//Morphology
import MorphData from '../data/MorphologyModuleData.json';
import MorphResources from '../data/MorphologyResourceData.json';
//Reciprocal Teaching
import RTData from '../data/ReciprocalTeachingModuleData.json';
import RTResources from '../data/ReciprocalTeachingResourceData.json';
import RTOverview from '../data/ReciprocalTeachingOverviewData.json';
import RTSummary from '../data/ReciprocalTeachingSummarizingData.json';
import RTQuestioning from '../data/ReciprocalTeachingQuestioningData.json';
import RTPredicting from '../data/ReciprocalTeachingPredictingData.json';
import RTClarifying from '../data/ReciprocalTeachingClarifyingData.json';
//Self-Generated Questions
import sgqData from '../data/SGQModuleData.json';
import sgqResources from '../data/SGQResourceData.json';
//Vocabulary Maps
import vocabData from '../data/VocabMapsModuleData.json';
import vocabResources from '../data/VocabMapsResourceData.json';
//WordBuilder
import wbData from '../data/WordBuilderModuleData.json';
import wbResources from '../data/WordBuilderResourceData.json';

import { Icon } from 'astro-icon'
---

<section class="ARGuides" id="ARGuides">
  <div class="module-wrapper">
    <header class="mod-header">
      <h2>Anticipation Reaction Guides Course</h2>
    </header>
    <article class="main">
      <div class="flex-container">
      <p>The ARG is a routine using an advanced organizer to prompt student thinking about key topics before reading, to document related text evidence during reading, and to reconsider opinions of key topics after reading based on documented evidence. This course demonstrates how to plan and implement instruction of the Anticipation-Reaction Guides (ARGs) to support studentsâ€™ reading comprehension. </p>
      <ul>
        <LaunchButton />
      
          {ARGData.map(ARG => (
            <HTMLButton title={ARG.title} url={ARG.url} buttonText={ARG.buttonText}/>
      
      ))}
      </ul>
      
    </div>
   
    </article>
    <div class='media-button-container'>
      <div>
        <MediaButton title="Anticipation Reaction Guides Training Webinar" url={}/>
      </div>
      
      </div>
   
    <aside class="aside aside-1"> 
      <div class='imgHolder'> 
        <img class='logos' src={ARGImg} alt="">
        <img class='logos-small' src={ARGSmall} alt="">
    </div>
  </aside>
    <footer class="footer">
      <h3 >Anticipation Reaction Guides Resources</h3>
          <ul class="column-list"> 
            {ARGResources.map(ARGResource => (
            
              <li><a href={ARGResource.url} title={ARGResource.title+' '+ARGResource.altText}>{ARGResource.title}</a> 
                <Icon name={ARGResource.name} alt={ARGResource.altText} title={ARGResource.altText} /></li>
            ))}
          </ul>
    </footer>
  </div>
  </section>

  <section class="GTG" id="GTG">
    <div class="module-wrapper">
      <header class="mod-header">
        <h2>Get The Gist Course</h2>
        </header>
        <article class="main">
          <div class='flex-container'>
          <p>The GtG strategy teaches students a systematic procedure for identifying the main idea in a text. This course will teach you how to plan and implement instruction of the Get the Gist (GtG) strategy. </p>
          <LaunchButton />
          <h4>The GtG course has 2 sections: </h4>
    <ul >
      {GTGData.map(GTG => (
        <HTMLButton title={GTG.title} url={GTG.url} buttonText={GTG.buttonText}/>
        
        
        ))} 
    </ul>
  </div>
      </article>
      <div class='media-button-container'>
        <MediaButton title='Get The Gist Training Webinar' url={}/>
      </div>
      <aside class="main"> 
        <div class='imgHolder'>
          <img class='logos' src={GTGIMg} alt="">
          <img class='logos-small' src={GTGsm} alt="">
        </div>
     
    </aside>
   <!--
     <aside class='aside aside-2'>
          
      {GTGData.map(GTG => (
        <a href={GTG.url}>
          <Button addText={"Launch: "}buttonText={GTG.title} />
          </a>
      
          ))} 
    </aside>
    -->

    <footer class="footer">
        <h3 >Get The Gist Resources</h3>
            <ul class="column-list"> 
              {GTGResources.map(GTGResources => (
                <li><a href={GTGResources.url} title={GTGResources.title+' '+GTGResources.altText}>{GTGResources.title}</a> 
                <Icon name={GTGResources.name} alt={GTGResources.altText} title={GTGResources.altText} /></li>
              ))}
            </ul>
      </footer>
    </div>
  </section>

  <section class="morphology" id="morphology">
    <div class="module-wrapper">
      <header class='mod-header'>
        <h2>Morphology Course</h2>
      </header>
      <article class="main">
        <div class='flex-container'>
        <p>The Morphology course demonstrates how to deliver effective morphology instruction that fosters morphological knowledge and word consciousness through five critical components: </p>
        <ol style='margin-bottom:1em; margin-left:1.8em;'>
          <li>Explicit instruction of roots, </li>
          <li>Generative morphology, </li>
          <li>Morphological problem solving, </li>
          <li>Use of contextual information, and </li>
          <li>Word etymology.  </li>
        </ol>
        <LaunchButton />
        <h4>The Morphology course has 4 sections: </h4>
     
          <ul>
            {MorphData.map(morph => (
              <HTMLButton title={morph.title} url={morph.url} buttonText={morph.buttonText}/>
              
              ))}
          </ul>
        </div>
      </article>
      <div class='media-button-container'>
        <div>
         <MediaButton title='Morphology Training Webinar' url={}/> 
        </div>
        <div>
         <MediaButton title='Morphology Demonstration Videos' url={}/> 
        </div>
       </div>
      <aside class="aside aside 1">
        <div class='imgHolder'>
          <img class='logos' src={MorphImg} alt="">
          <img class='logos-small' src={MorphSmall} alt="">
        </div>
      </aside>
      <!--
        <aside class='aside aside-2'>
        {MorphData.map(morph => (
          <a href={morph.url}>
            <Button addText={"Launch: "} buttonText={morph.title} />
          </a>
          
          ))}
      </aside>
       -->
    <footer class='footer'>
        <h3> Morphology Resources</h3>
        <ul class="column-list">
          {MorphResources.map(MorphResource =>(
            <li><a href={MorphResource.url} title={MorphResource.title+' '+MorphResource.altText}>{MorphResource.title}</a>
              <Icon name={MorphResource.name} alt={MorphResource.altText} title={MorphResource.altText} /> </li>
          ))}
         </ul>
      </footer>
    </div>
  </section>
  
  <section class="ReciprocalTeaching" id="ReciprocalTeaching">
    <div class="module-wrapper">
      <header class='mod-header'>
        <h2>Reciprocal Teaching Course</h2>
      </header>
      <aside class='aside aside-1'>
       <div class='imgHolder'> 
          <img class='logos' src={RecipTechImg} alt="">
          <img class='logos-small' src={RTSmall} alt="">
        </div>
        </aside>
        <article class="main">
          <div class='flex-container'>
          <p>The Reciprocal Teaching (RT) course demonstrates how to support student reading comprehension through cooperative group discussion focused on four, high leverage reading comprehension strategies: Predicting, Questioning, Clarifying, and Summarizing (Palinscar & Brown, 1984). This course illustrates a 5-week sample schedule for building cooperative groups and folding in the four RT strategies one at a time. This course also provides teacher opportunity for practice, sample teacher scripts, teacher tips, and suggestions for student warm-up and group activities.  </p>
          <LaunchButton />
          <h4>The RT Course includes 6 sections: </h4>
         
          <ul>
            {RTData.map(rt => (
              <HTMLButton title={rt.title} url={rt.url} buttonText={rt.buttonText}/>
           
            
            ))}
          </ul>
         </div>
        </article>
      <div class='media-button-container'>
       <div>
        <MediaButton title='Reciprocal Teaching Training Webinar' url={}/> 
       </div>
       <div>
        <MediaButton title='Reciprocal Teaching Demonstration Videos' url={}/> 
       </div>
      </div>
      <footer class='footer'>
        <h3>Reciprocal Teaching Resources</h3>
        <div class="tabs">
    
          <div class="tab">
              <input type="radio" id="tab-1" name="tab-group-1" checked>
              <label for="tab-1">General Resources</label>
              
              <div class="content">
                <ul class="column-list">
                  {RTOverview.map(RTOverview =>(
                    <li><a href={RTOverview.url} title={RTOverview.title+' '+RTOverview.altText}>{RTOverview.title}</a>
                      <Icon name={RTOverview.name}  alt={RTOverview.altText} title={RTOverview.altText} /></li>
                  ))}
                 </ul>
              </div> 
          </div>
           
          <div class="tab">
              <input type="radio" id="tab-2" name="tab-group-1">
              <label for="tab-2">Summarizing</label>
              
              <div class="content">
                <ul class="column-list">
                  {RTSummary.map(RTSummary =>(
                    <li><a href={RTSummary.url} title={RTSummary.title+' '+RTSummary.altText}>{RTSummary.title}</a>
                      <Icon name={RTSummary.name}  alt={RTSummary.altText} title={RTSummary.altText} /></li>
                  ))}
                 </ul>
              </div> 
          </div>
           
           <div class="tab">
              <input type="radio" id="tab-3" name="tab-group-1">
              <label for="tab-3">Questioning</label>
            
              <div class="content">
                <ul class="column-list">
                  {RTQuestioning.map(RTQuestioning =>(
                    <li><a href={RTQuestioning.url} title={RTQuestioning.title+' '+RTQuestioning.altText}>{RTQuestioning.title}</a>
                      <Icon name={RTQuestioning.name} alt={RTQuestioning.altText} title={RTQuestioning.altText} /></li>
                  ))}
                 </ul>
              </div> 
          </div>
       
       
          <div class="tab">
              <input type="radio" id="tab-4" name="tab-group-1">
              <label for="tab-4">Predicting</label>
            
              <div class="content">
                <ul class="column-list">
                  {RTPredicting.map(RTPredicting =>(
                    <li><a href={RTPredicting.url} title={RTPredicting.title+' '+RTPredicting.altText}>{RTPredicting.title}</a>
                      <Icon name={RTPredicting.name} alt={RTPredicting.altText} title={RTPredicting.altText} /></li>
                  ))}
                 </ul>
              </div> 
          </div>
       
            <div class="tab">
              <input type="radio" id="tab-5" name="tab-group-1">
              <label for="tab-5">Clarifying</label>
            
              <div class="content">
                <ul class="column-list">
                  {RTClarifying.map(RTClarifying =>(
                    <li><a href={RTClarifying.url} title={RTClarifying.title+' '+RTClarifying.altText}>{RTClarifying.title}</a>
                      <Icon name={RTClarifying.name} alt={RTClarifying.altText} title={RTClarifying.altText} /></li>
                  ))}
                 </ul>              
                </div> 
          </div>
       </div> 
      </footer>
      </div>
  </section>

<section class="SGQmodules" id="SGQmodules">
    <div class="module-wrapper">
      <header class='mod-header'>
        <h2>Self-Generated Questions Course</h2>
      </header>
<aside class='aside aside-1'>
  <div class='imgHolder'> 
    <img class='logos' src={sgqImg} alt="">
    <img class='logos-small' src={SGQSmall} alt="">
  </div>
  </aside>
  <article class='main'>
      <div class='flex-container'>
        <p>This course will teach you how to use the Self-Generated Questions (SGQs) strategy as a tool to support adolescent reading comprehension. The SGQ strategy teaches students how to self-generate three levels of questions while reading in order to help build and monitor their comprehension of text.</p>
      <ul>
        <LaunchButton />
      </ul>
        <h4>The SGQ Course contains 5 sections:</h4>
        <ul>
          {sgqData.map(SGQ => (
            <HTMLButton title={SGQ.title} url={SGQ.url} buttonText={SGQ.buttonText}/>
            
          ))}
        </ul>
      </div>
    </article>
    <div class='media-button-container'>
      <MediaButton title='Self-Generated Questions Demonstration Videos' url='https://vimeo.com/showcase/10308765'/>
    </div>
      <footer class='footer'>
        <h3>Self-Generated Questions Resources</h3>
          <ul class="column-list">
            {sgqResources.map(sgqResource=>(
              <li><a href={sgqResource.url} title={sgqResource.title+' '+sgqResource.altText}>{sgqResource.title}</a>
                <Icon name={sgqResource.name} alt={sgqResource.altText} title={sgqResource.altText} /></li>
            ))}
          </ul>
      </footer>
     </div>
  </section>
  
  <section class="vocabModules" id="vocabModules">
    <div class="module-wrapper">
      <header class='mod-header'>        
        <h2>Vocabulary Maps Course</h2>
      </header>
      <aside class='aside aside-1'>
      <div class='imgHolder'>
        <img class='logos' src={vocabImg} alt="">
        <img class='logos-small' src={vocabSmall} alt="">
      </div>
    </aside>
    <article class='main'>
      <div class='flex-container'>
        <p>A Vocabulary Map is a graphic organizer used to preteach key vocabulary. This course will illustrate how to prepare Vocabulary Maps and how to deliver explicit vocabulary instruction using them.</p>
      <p>The Vocabulary Map course has 3 sections:</p>
      <LaunchButton />
      <ul>
        {vocabData.map(vocab => (
          <HTMLButton title={vocab.title} url={vocab.url} buttonText={vocab.buttonText}/>
        ))}
      </ul>
      </div>
      </article>
      <!--
        <aside class='aside aside-2'>
        {vocabData.map(vocab => (
         <a href={vocab.url}>
          <Button addText={"Launch: "} buttonText={vocab.title} />
          </a>
          
         ))}
      </aside>
       -->
      
      <footer  class='footer'>
        <h3 >Vocabulary Maps Resources</h3>
        <ul class="column-list">
          {vocabResources.map(vocabResource=>(
            <li><a href={vocabResource.url} title={vocabResource.title+' '+vocabResource.altText}>{vocabResource.title}</a>
              <Icon name={vocabResource.name} alt={vocabResource.altText} title={vocabResource.altText} /></li>
          ))}
        </ul>
        </footer>
      </div>
  </section>

  <section class="wordbuilder" id="wordbuilder">
  
    <div class="module-wrapper">
      <header class='mod-header'>
        <h2>Wordbuilder Course</h2>
      </header>
      
      <aside class='aside aside-1'>
        <div class="imgHolder">
          <img class='logos' src={WBImg} alt="">
          <img class='logos-small' src={WBSmall} alt="">
        </div>
      </aside>
    
      <article class='main'>
        <div class='flex-container'>
          <p>WordBuilder Intervention is a free application in the <a href='https://apple.com/'>Apple App Store</a>, the <a href='https://play.google.com/store/apps/details?id=org.napacoe.wordbuilder'>Google Play Store</a> & <a href='http://bit.ly/wordbuilder_int'>The Amazon Store!</a> and a free web version on <a href='https://calireads.org/wordbuilder/'>CALI Reads Wordbuilder</a>. The WordBuilder Intervention course demonstrates how to effectively and systematically deliver teacher-led, small group instruction using this tool to teach struggling readers how to break down, build, and spell multisyllabic words.  </p>
          <LaunchButton />
        <p>The WordBuilder Intervention course has 4 sections:</p>
       <ul>
        {wbData.map(wordbuilder => (
          <HTMLButton title={wordbuilder.title} url={wordbuilder.url} buttonText={wordbuilder.buttonText}/>
     
    ))}
       </ul>
        </div>
        
      </article>
      <div class='media-button-container' id='media-button-container'>
  
        <div >
          <div>
            
           </div>
          <MediaButton url="https://vimeo.com/showcase/9843748"  title="WordBuilder Demonstration Videos" />
        </div>    
        <div >
      
          <MediaButton url='https://vimeo.com/showcase/10178533' title="WordBuilder Training Webinars"  />
      </div>
     
        </div>
     <footer class='footer'>
    
      <h3>Wordbuilder Resources</h3>
        <ul class="column-list">
            {wbResources.map(wbResource =>(
              <li><a href={wbResource.url} title={wbResource.title+' '+wbResource.altText}>{wbResource.title}</a>
                <Icon name={wbResource.name} alt={wbResource.altText} title={wbResource.altText} /></li>
            ))}
        </ul>
    </footer>
    </div>
  </section>
  <style>



.flex-container{
  width: 100%;
      padding: 0px;
      margin-top:-20px;
      font-size: 2.1ch;   
      list-style: none;
      display: flex-end;
/*
      box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
*/

    }

    .flex-container a{
      text-decoration: underline;
    }

.media-button-container{

  display: flex;
  flex-wrap: nowrap;
  column-gap: 20px;
  justify-content:center;
}

.moduleButton {
  color: #fff;
}

.moduleButton a:hover{
background-color: #666;
}

    .column-list {
  columns: 400px;
  text-align: left;
}
.column-list li a:link{
  justify-content: baseline;
  text-decoration: underline;


}

.column-list li a:hover{
color:var(--color-accent);
}

.module-wrapper {
  
  display: flex;  
  flex-flow: row wrap;
  font-weight: bold;
  text-align: center; 
}

.module-wrapper > * {
  padding: 10px;
  flex: 1 100%;
}

.mod-header {
margin-top:2.8em;
}

.footer {
  background: #fff;


}

.main {
  text-align: left;
  max-width: 750px;
}

.aside-1 {
}

.aside-2 {
  text-align: left;
}

.tabs {
  position: relative;   
  min-height: 300px; /* This part sucks */
  clear: both;
  margin: 25px 0;
}
.tab {
  float: left;
}
.tab label {
  background: #eee; 
  padding: 10px; 
  border: 1px solid #ccc; 
  margin-left: -1px; 
  position: relative;
  left: 1px; 
}
.tab [type=radio] {
  display: none;   
}
.content {
  position: absolute;
  top: 28px;
  left: 0;
  background: white;
  right: 0;
  bottom: 0;
  padding: 10px;
  border: 1px solid #ccc; 
}
[type=radio]:checked ~ label {
  background: white;
  border-bottom: 1px solid white;
  z-index: 2;
}
[type=radio]:checked ~ label ~ .content {
  z-index: 1;
}

[astro-icon] {
        color: #666;
        /* OR */
        width:22px;
        padding-top: 12px;
    }

   


@media all and (min-width: 600px) {
  .aside { flex: 1 0 0; }
}

@media all and (min-width: 800px) {
  .main    { flex: 3 0px; }
  .aside-1 { order: 1; } 
  .main    { order: 2; }
  .aside-2 { order: 3; }
  .media-button-container{ order:4;}
  .footer  { order: 5; }
  
}

@media (max-width: 1100px) {
.tabs{
  max-width: 600px;
  overflow: hidden;
}
}



  </style>
      
      
  